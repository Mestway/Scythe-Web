import { Axis } from 'vega-lite/build/src/axis';
import { Bin } from 'vega-lite/build/src/bin';
import { Channel } from 'vega-lite/build/src/channel';
import * as vlFieldDef from 'vega-lite/build/src/fielddef';
import { Scale } from 'vega-lite/build/src/scale';
import { Legend } from 'vega-lite/build/src/legend';
import { SortOrder, SortField } from 'vega-lite/build/src/sort';
import { TimeUnit } from 'vega-lite/build/src/timeunit';
import { Type } from 'vega-lite/build/src/type';
import { Wildcard, SHORT_WILDCARD, WildcardProperty } from '../wildcard';
import { AggregateOp } from 'vega-lite/build/src/aggregate';
export declare type EncodingQuery = FieldQuery | ValueQuery;
export interface EncodingQueryBase {
    channel: WildcardProperty<Channel>;
}
export interface ValueQuery extends EncodingQueryBase {
    value: WildcardProperty<boolean | number | string>;
}
export declare function isValueQuery(encQ: EncodingQuery): encQ is ValueQuery;
export declare function isFieldQuery(encQ: EncodingQuery): encQ is FieldQuery;
export interface FieldQuery extends EncodingQueryBase {
    channel: WildcardProperty<Channel>;
    aggregate?: WildcardProperty<AggregateOp>;
    /** Internal flag for representing automatic count that are added to plots with only ordinal or binned fields. */
    autoCount?: WildcardProperty<boolean>;
    timeUnit?: WildcardProperty<TimeUnit>;
    /**
     * Special flag for enforcing that the field should have either timeUnit, bin, or aggregate
     */
    hasFn?: boolean;
    bin?: boolean | BinQuery | SHORT_WILDCARD;
    scale?: boolean | ScaleQuery | SHORT_WILDCARD;
    sort?: SortOrder | SortField;
    field?: WildcardProperty<string>;
    type?: WildcardProperty<Type>;
    axis?: boolean | AxisQuery | SHORT_WILDCARD;
    legend?: boolean | LegendQuery | SHORT_WILDCARD;
}
export declare type FlatQuery<T> = {
    [P in keyof T]: WildcardProperty<T[P]>;
};
export declare type FlatQueryWithEnableFlag<T> = (Wildcard<boolean> | {}) & FlatQuery<T>;
export declare type BinQuery = FlatQueryWithEnableFlag<Bin>;
export declare type ScaleQuery = FlatQueryWithEnableFlag<Scale>;
export declare type AxisQuery = FlatQueryWithEnableFlag<Axis>;
export declare type LegendQuery = FlatQueryWithEnableFlag<Legend>;
export declare function toFieldDef(fieldQ: FieldQuery, props?: (keyof FieldQuery)[]): vlFieldDef.FieldDef;
/**
 * Is a field query continuous field?
 * This method is applicable only for fieldQuery without wildcard
 */
export declare function isContinuous(fieldQ: FieldQuery): boolean;
/**
 * Is a field query discrete field?
 * This method is applicable only for fieldQuery without wildcard
 */
export declare function isDiscrete(fieldQ: FieldQuery): boolean;
/**
 *  Returns the true scale type of an encoding.
 *  @returns {ScaleType} If the scale type was not specified, it is inferred from the encoding's Type.
 *  @returns {undefined} If the scale type was not specified and Type (or TimeUnit if applicable) is a Wildcard, there is no clear scale type
 */
export declare function scaleType(fieldQ: FieldQuery): "point" | "linear" | "bin-linear" | "log" | "pow" | "sqrt" | "time" | "utc" | "sequential" | "ordinal" | "bin-ordinal" | "band";
